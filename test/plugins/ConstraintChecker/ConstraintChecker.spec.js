/*jshint node:true, mocha:true*/
/**
 * Generated by PluginGenerator 1.7.0 from webgme on Tue Jan 10 2017 08:36:37 GMT-0600 (Central Standard Time).
 */

'use strict';
var testFixture = require('../../globals'),
    mongodb = require('mongodb');

describe('ConstraintChecker', function () {
    var gmeConfig = testFixture.getGmeConfig(),
        expect = testFixture.expect,
        logger = testFixture.logger.fork('ConstraintChecker'),
        PluginCliManager = testFixture.WebGME.PluginCliManager,
        projectName = 'testProject',
        pluginName = 'ConstraintChecker',
        Q = testFixture.Q,
        resultCollection,
        db,
        project,
        gmeAuth,
        storage,
        commitHash;

    before(function (done) {
        testFixture.clearDBAndGetGMEAuth(gmeConfig, projectName)
            .then(function (gmeAuth_) {
                gmeAuth = gmeAuth_;
                // This uses in memory storage. Use testFixture.getMongoStorage to persist test to database.
                storage = testFixture.getMemoryStorage(logger, gmeConfig, gmeAuth);
                return storage.openDatabase();
            })
            .then(function () {
                var importParam = {
                    projectSeed: testFixture.path.join(testFixture.SEED_DIR, 'EmptyProject.webgmex'),
                    projectName: projectName,
                    branchName: 'master',
                    logger: logger,
                    gmeConfig: gmeConfig
                };

                return testFixture.importProject(storage, importParam);
            })
            .then(function (importResult) {
                project = importResult.project;
                commitHash = importResult.commitHash;
                return project.createBranch('test', commitHash);
            })
            .then(function () {
                var deferred = Q.defer();
                mongodb.MongoClient.connect(global.constraintCheckerHookConfig.mongoUri)
                    .then(function (db_) {
                        db = db_;
                        global.db = db;
                        deferred.resolve();
                    })
                    .catch(deferred.reject);
                return deferred.promise;
            })
            .then(function () {
                resultCollection = db.collection(project.projectId);
            })
            .nodeify(done);
    });

    after(function (done) {
        storage.closeDatabase()
            .then(function () {
                return gmeAuth.unload();
            })
            .then(function () {
                //FIXME: close db
            })
            .nodeify(done);
    });

    it('should run checker on empty project and insert hasViolation=false', function (done) {
        var manager = new PluginCliManager(null, logger, gmeConfig),
            pluginConfig = {
            },
            context = {
                project: project,
                commitHash: commitHash
            };

        manager.executePlugin(pluginName, pluginConfig, context, function (err, pluginResult) {
            expect(err).to.equal(null);
            expect(typeof pluginResult).to.equal('object');
            expect(pluginResult.success).to.equal(true);

            resultCollection.findOne({_id: commitHash})
                .then(function (result) {
                    expect(result.isRunning).to.equal(false);
                    expect(result.metaInconsistent).to.equal(false);
                    expect(result.hasViolation).to.equal(false);

                    done();
                })
                .catch(done);
        });
    });
});
